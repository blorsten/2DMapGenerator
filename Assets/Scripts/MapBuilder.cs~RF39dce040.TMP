using System;
using System.Collections.Generic;
using MapGeneration.SaveSystem;
using UnityEngine;

namespace MapGeneration
{
    [ExecuteInEditMode]
    public class MapBuilder : Singleton<MapBuilder>
    {
        [SerializeField] private MapBlueprint _currentBlueprint;

        public Map ActiveMap { get; set; }
        public List<MapDataSaver> SavedMaps { get; set; }

        protected override void Awake()
        {
            base.Awake();
            Initialize();
        }

        private void Initialize()
        {
            SavedMaps = new List<MapDataSaver>();
        }

        /// <summary>
        /// Generates a map from a specific blueprint
        /// </summary>
        /// <param name="mapBlueprint">blueprint</param>
        /// <returns>Map</returns>
        public Map Generate(MapBlueprint mapBlueprint)
        {
            //If the seed has been defined in the blueprint use that instead.
            var seed = mapBlueprint.UserSeed != 0 ? 
                mapBlueprint.UserSeed : 
                DateTime.Now.Millisecond;

            //Creating the new map.
            Map map = new GameObject(mapBlueprint.name).AddComponent<Map>();
            map.Initialize(seed, mapBlueprint);

            //Save the new map.
            Save(map);

            //Start the blueprint process.
            mapBlueprint.Generate(map);

            //Now that the map is fully made, spawn it.
            Spawn(map);


            ActiveMap = map;

            return map;
        }

        public Map Generate(MapDataSaver existingMap)
        {
            //Creating the new map.
            Map map = new GameObject(existingMap.MapBlueprint.name).AddComponent<Map>();

            //If save data from active map before making this new one.
            if (ActiveMap.MapDataSaver == existingMap && existingMap.Map)
                existingMap.SavePersistentData();

            //Update MapDataSaver with the new map reference.
            existingMap.Map = map;

            //Initialize the map with the existing data saver.
            map.Initialize(existingMap.MapSeed, existingMap.MapBlueprint, existingMap);

            //Start the blueprint process.
            existingMap.MapBlueprint.Generate(map);

            //Now that the map is fully made, spawn it.
            Spawn(map);
            return map;
        }

        /// <summary>
        /// Generates a map form current blueprint
        /// </summary>
        /// <returns>Map</returns>
        public Map Generate()
        {
            return Generate(_currentBlueprint);
        }

        /// <summary>
        /// Saves a map
        /// </summary>
        /// <param name="map">map</param>
        public void Save(Map map)
        {
            SavedMaps.Add(map.MapDataSaver);
        }

        /// <summary>
        /// Spawns a map as instances
        /// </summary>
        /// <param name="map">map</param>
        public void Spawn(Map map)
        {
            Vector2 gridSize = map.MapBlueprint.GridSize;
            Vector2 chunkSize = map.MapBlueprint.ChunkSize;
            //Remember if we have a already active map.
            Map oldMap = ActiveMap;

            //Set the new map as active.
            ActiveMap = map;

            //Lets destroy the old map if there was one.
            if (oldMap != null)
                Despawn(oldMap);

            for (int x = 0; x < gridSize.x; x++)
            {
                for (int y = 0; y < gridSize.y; y++)
                {
                    float xPosition = transform.position.x + chunkSize.x * x 
                        + chunkSize.x / 2 - .5f;
                    float yPosition = transform.position.y + chunkSize.y * y 
                        + chunkSize.y / 2 - .5f;

                    if (map.Grid[x, y] != null && map.Grid[x,y].Prefab != null) 
                        map.Grid[x, y].Instantiate(new Vector2(xPosition, yPosition), 
                            map.transform);
                }
            }

            //Start the post process
            map.MapBlueprint.StartPostProcess(map);

            map.MapDataSaver.LoadPersistentData();
        }

        /// <summary>
        /// Despawns a map from the world
        /// </summary>
        /// <param name="map">map</param>
        public void Despawn(Map map)
        {
            //If the new map isn't the same as the old one, save its data before despawning.
            if (map && map.MapDataSaver != ActiveMap.MapDataSaver)
                map.MapDataSaver.SavePersistentData();

            if (Application.isPlaying)
            {
                //Destroying all instances of the spawned chunks
                Destroy(map.gameObject);
            }
            else
                DestroyImmediate(map.gameObject);
        }
    }
}
